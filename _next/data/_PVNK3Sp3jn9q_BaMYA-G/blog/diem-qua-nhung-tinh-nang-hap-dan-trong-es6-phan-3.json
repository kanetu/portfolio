{"pageProps":{"frontmatter":"{\"title\":\"Điểm qua những tính năng hấp dẫn trong ES6 - Phần 3\",\"date\":\"2018-07-06T07:18:40.000Z\",\"status\":\"publish\",\"thumbnail\":\"images/post-thumbnail/array-khong-chi-la-array.png\",\"description\":\"Hmm..Tính năng này rất thường xuất hiện trong ReactJS. `arrow` dịch ra là mũi tên, vâng chúng ta sẽ làm việc với mũi tên :).\",\"tags\":[\"javascript\"]}","content":"\n## 6.Arrow Function in ES6\n\nHmm..Tính năng này rất thường xuất hiện trong ReactJS. `arrow` dịch ra là mũi tên, vâng chúng ta sẽ làm việc với mũi tên :).\n\nThông thường khi tạo một `function` trong Javascript thì ta sử dụng những cách sau:\n\n```javascript\n//cách 1\nfunction nameFunction(var1,var2){\n  ...\n}\n\n// cách 2\nvar nameFunction = function(var1, var2){\n  ....\n}\n```\n\nTrong ES6 ta tạo đơn giản hơn bằng cách sử dụng mũi tên như sau:\n\n```javascript\nvar nameFunction = (var1,var2) => { //dosomething...};\n\nvar echoName = (name) => {\n  alert(name)\n};\n\nechoName(\"kane\"); // nó sẽ alert ra kane\n\n```\n\n- Khi `funciton` chỉ có `một dòng lệnh`, ta có thể viết như thế này cho gọn hơn.\n\n```javascript\nvar echoName = (name) => alert(name);\n\nechoName(\"kane\"); // alert ra kane\n```\n\nNghĩa là bạn có thể bỏ đi cặp dấu {}, điều này tuân thủ theo nguyên tắc \"nếu bên thân cặp {} chỉ là một câu lệnh thì bạn có thể bỏ cặp {}\".\n\n- Khi `function` chỉ có `một tham tham số`, ta có thể viết ngắn gọn lại là:\n\n```javascript\nvar echoName = (name) => {\n  alert(name);\n};\n\nechoName(\"kane\"); // alert ra kane\n\n//Hoặc kết hợp cả tips ở trên thì ta có thể viết luôn như thế này\n\nvar echoName1 = (name) => alert(name);\n```\n\n- Khi `function` không có tham số:\n\n```javascript\nvar sayHello = () => alert(\"Hello....!\");\n\nsayHello(); // alert ra câu Hello....!\n```\n\n- Ta Phải chú ý đến ràng buộc mũi tên `=>` nữa nhá:\n\n```javascript\nconst func1 = (x,y) // sai\n=> {\n  return x + y;\n};\n\nconst func2 = (x,y) => // đúng\n{\n  return x - y;\n};\n\nconst func3 = (x,y) => {// đúng\n\n  return x * y;\n};\n\nconst func4 = ( // đúng\nx,\ny\n) => {\n  return x / y;\n}\n```\n\n## 7. Destructuring Assignment in ES6\n\n```\nCú pháp Destructuring Assignment là một biểu thức Javascript mà nó có thể giải nén các giá trị từ `array` hoặc thuộc tính từ một `object` vào những biến riêng biệt.\n```\n\n```javascript\nvar a, b, rest;\n[a, b] = [10, 20];\n\nconsole.log(a);\n// expected output: 10\n\nconsole.log(b);\n// expected output: 20\n\n[a, b, ...rest] = [10, 20, 30, 40, 50];\n\nconsole.log(rest);\n// expected output: [30,40,50]\n```\n\nNếu để `...` trước một biến thì khi bị tràn giá trị như ví dụ cuối thì biến `rest` nó sẽ lấy hết phần giá trị bị tràn.\n\nCòn nhiều tips nữa như có thể: swap variable, ignoring some returned values bạn nào muốn tìm hiểu thêm thì vào <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">đây</a>\n\n## 8. Modules in ES6\n\nNếu bạn nào đang học ReactJS thì sẽ thường sử dụng tính năng này này, lúc ta ta quản lý từng module như một component, mình cũng mới học thôi nên hiểu sao nói vậy.\n\nTrước ES6 JavaScript không hỗ trợ module. Mọi người thường sử dụng AMD, RequireJS, CommonJS và nhiều cái khác. Bây giờ trong ES6 bạn có thể sử dụng các import và export.\n\nHãy xem ví dụ chúng ta có một biến `port` và phương thức `getAccounts` trong file`module.js` ES5:\n\n```javascript\n\nmodule.exports = {\n  port: 3000,\n  getAccounts: function() {\n    ...\n  }\n}\n\n```\n\nTrong file main.js ES5 chúng ta require('module.js) là dependency:\n\n```javascript\nvar service = require(\"module.js\");\nconsole.log(service.port); // 3000\n```\n\nVới ES6 chúng ta import và export như sau, ở file `module.js`:\n\n```javascript\nexport var port = 3000\nexport function getAccounts(url) {\n  ...\n}\n\n```\n\nTrong file `main.js`\n\n```javascript\nimport { port, getAccounts } from \"module\";\nconsole.log(port); // 3000\n```\n\nHoặc ta muốn import hết những gì đã export trong file `module.js` thì:\n\n```javascript\nimport * as service from \"module\";\nconsole.log(service.port); // 3000\n```\n"},"__N_SSG":true}